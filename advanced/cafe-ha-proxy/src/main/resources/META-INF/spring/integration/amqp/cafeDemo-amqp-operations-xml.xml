<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:stream="http://www.springframework.org/schema/integration/stream"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- rabbit connection factory, rabbit template, and rabbit admin -->
	<import resource="classpath:META-INF/spring/integration/amqp/cafeDemo-amqp-config-xml.xml" />

	<!--  intercept messages on these channels while still allowing them to continue -->
    <int:wire-tap channel="logger" pattern="preOrders,coldDrinks,hotDrinks,preparedDrinks,deliveries"/>
	<int:logging-channel-adapter id="logger" log-full-message="true" level="INFO"/>
    
    <!--  To receive AMQP Messages from a Queue, configure an inbound-channel-adapter  -->
	<int-amqp:inbound-gateway 
		id="newCafeOrders"
		request-channel="jsonOrders"
		queue-names="new-orders" 
		connection-factory="rabbitConnectionFactory" />

	<int:chain input-channel="jsonOrders" >
		<int:json-to-object-transformer type="org.springframework.integration.samples.cafe.Order" />

		<int:splitter expression="payload.items" apply-sequence="true"/>

		<int:header-enricher>
			<int:header name="ICED" expression="payload.isIced()"/>
		</int:header-enricher>
		
		<int:object-to-json-transformer />
	
		<int:router expression="headers.ICED ? 'coldDrinks' : 'hotDrinks'"/>
	</int:chain>
	
	<int:channel id="coldDrinks" />

	<!-- Default poller -->
	<int:poller default="true" fixed-rate="100"/>
	
	<int:channel id="hotDrinks" />

    <!-- To send AMQP Messages to an Exchange and receive back a response from a remote client, configure an outbound-gateway -->	
	<int-amqp:outbound-gateway 
		id="coldDrinksBarista" 
		request-channel="coldDrinks"
		reply-channel="preparedJsonDrinks"
		exchange-name="cafe-drinks"
		routing-key="drink.cold"
		amqp-template="coldDrinkTemplate" />

    <!-- To send AMQP Messages to an Exchange and receive back a response from a remote client, configure an outbound-gateway -->	
	<int-amqp:outbound-gateway 
		id="hotDrinksBarista" 
		request-channel="hotDrinks"
		reply-channel="preparedJsonDrinks" 
		exchange-name="cafe-drinks"
		routing-key="drink.hot"
		amqp-template="hotDrinkTemplate" />

    <int:channel id="preparedJsonDrinks"/>

	<int:chain input-channel="preparedJsonDrinks" >
		<int:json-to-object-transformer type="org.springframework.integration.samples.cafe.Drink"/>
	
	    <int:aggregator method="prepareDelivery" >
	    	<bean class="org.springframework.integration.samples.cafe.xml.Waiter"/>
	    </int:aggregator>
	
		<int:header-enricher >
			<int:header name="NUMBER" expression="payload.getOrderNumber()" />
		</int:header-enricher>
	
		<int:object-to-json-transformer />
	</int:chain>

	<bean id="waiter" class="org.springframework.integration.samples.cafe.xml.Waiter"/>
	
	<!-- rabbit exchanges, queues, and bindings used by this app -->
	<rabbit:topic-exchange name="cafe-drinks" auto-delete="true" durable="true">
		<rabbit:bindings>
			<rabbit:binding queue="all-drinks" pattern="drink.*"/>
		</rabbit:bindings>
	</rabbit:topic-exchange>
	
	<rabbit:queue name="all-drinks" auto-delete="false" durable="true" queue-arguments="haArgs" />	

	<rabbit:fanout-exchange name="cafe-deliveries" auto-delete="false" durable="true">
		<rabbit:bindings>
			<rabbit:binding queue="all-deliveries" />
		</rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<rabbit:queue name="all-deliveries" auto-delete="false" durable="true" queue-arguments="haArgs" />	

    <rabbit:template id="coldDrinkTemplate" 
    	connection-factory="rabbitConnectionFactory" 
		reply-queue="cold-drink-replies"
    	reply-timeout="60000"/>

	<rabbit:queue name="cold-drink-replies" auto-delete="false" durable="true" queue-arguments="haArgs" />	

    <rabbit:template id="hotDrinkTemplate" 
    	connection-factory="rabbitConnectionFactory" 
		reply-queue="hot-drink-replies"
    	reply-timeout="60000"/>

	<rabbit:queue name="hot-drink-replies" auto-delete="false" durable="true" queue-arguments="haArgs" />	

    <rabbit:listener-container id="coldDrinkReplyContainer" connection-factory="rabbitConnectionFactory" task-executor="coldDrink-reply-exec">
        <rabbit:listener ref="coldDrinkTemplate" queues="cold-drink-replies"/>
    </rabbit:listener-container>

    <task:executor id="coldDrink-reply-exec" />

    <rabbit:listener-container id="hotDrinkReplyContainer" connection-factory="rabbitConnectionFactory" task-executor="hotDrink-reply-exec">
        <rabbit:listener ref="hotDrinkTemplate" queues="hot-drink-replies"/>
    </rabbit:listener-container>

    <task:executor id="hotDrink-reply-exec" />
    
</beans>